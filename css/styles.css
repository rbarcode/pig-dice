// Player business logic

Player()
p’s total score: [0]
p’s current score: [0]
isTurn: false
/* player.isTurn = !player.isTurn */

hold: true/false

Player.prototype.calcCurrentScore = function() {
if (currentRollValue === 1) {
psCurrentScore = 0;
} else if (currentRollValue > 1 and < 7) {
psCurrentScore += currentRollValue;
}}

Player.prototype.calcTotalScore = function() {
psTotalScore += psCurrentScore;
}

// Game business logic

Game()
players: {playerA, playerB}
playersTotalScores: {playerA.psTotalScore, playerB.psTotalScore}
activePlayer: players[0]
die: currentRollValue
gameOver: true/false

/* Game.prototype.activePlayer = function() {
activePlayer = players[0] */

/* Game.prototype.switchPlayer = function() {
if currentRollValue === 1 || player presses hold
- if activePlayer === players[0]
then activePlayer = players[1]
else activePlayer = player[0] */

Game.prototype.gameState = function() {
if (activePlayer.psTotalScore + activePlayer.psCurrentScore ≥ 100) {
activePlayer.psTotalScore += activePlayer.psCurrentScore;
gameOver = true;
}
else…
}

Game.prototype.dieRoll = function() {
random number generator stuff…
outcome = a value between 1 and 6 that gets stored in the variable “currentRollValue”.
}

Game.prototype.hold = function(submit) {
this.calcTotalScore;
this.changeTurn;
}

Game.prototype.changeTurn = function() {
  this.players.forEach(function(player)) {
    player.isTurn = !player.isTurn
  }
  this.activePlayer = 1-this.activePlayer;
}









//These two versions of the same function works!

//This is with Simi's idea:
function Game() {
let player1 = new Player();
let player2 = new Player();
this.players = [player1, player2];
this.totalScore = [player1.totalScore, player2.totalScore]
this.activePlayer = this.players[0];
// this.die = currentRollValue;
this.gameOver = false;
}

//This is with a slightly modified version of Seth's idea
function Game(player1, player2) {
  this.players = [player1 = new Player(player1), player2 = new Player(player2)];
  this.totalScore = [player1.totalScore, player2.totalScore]
  }



Seth Rolls: 
  roll 1: 6
    current: 6
    total: 6
  roll 2: 5
    current: 11 (6+5)
    total: 17 (6+5+6)
  roll 3: 4
    current: 15 (6+5+4)
    total 32 (6+ 6+5+ 6+5+4) 
  roll 4: 3
    current: 18 (6+5+4+3)
    total: (6+ 6+5+ 6+5+4+ 6+5+4+3)
    //it's saying the total is the total from the first roll plus the total from the second roll, etc.


  
  
  let newGame = new Game();

  newGame.dieRoll();

  newGame.players[0];
  newGame.players[0].currentScore;
  newGame.players[0].calcTotalScore();
  newGame.players[0].totalScore;

  newGame.changeTurn();

  newGame.hold();
